import java.io.File;
import java.io.IOException;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;
import java.io.*;
import java.util.*;
import java.text.DecimalFormat;
import java.util.Collections;


public class timmockPlayer {
  private static final int positiveNumber = 1000;
  private static final int negativeNumber = -1000;
  private static final int MAX_DEPTH = 20;
  public static int [] playerMove =  new int [4];
  public static void main(String[] args) {
    //readString("[13][332][1123][31202][113223][3002222][121212]LastPlay:(2,3,2,2)");
    //readString("[13][302][1003][31002][123133][3000002][121212]LastPlay:(1,3,1,3)");
    //readString("[13][302][1003][31002][100003][3000002][121212]LastPlay:(1,3,1,3)");
    //readString("[13][302][1003][30002][100023][3000002][121212]LastPlay:(2,4,4,1)");
    //DEMO TESTS RIGHT HERE!!!
    //System.out.println(readString("[13][302][1003][31002][100003][3000002][121212]LastPlay:(1,3,1,3)"));
    //System.out.println(readString("[13][302][1003][31002][110003][3000002][121212]LastPlay:(1,2,1,4)"));
    //System.out.println(readString("[13][302][1003][31002][112003][3000002][121212]LastPlay:(2,2,2,3)"));
    //System.out.println(readString("[13][302][1003][31002][112003][3020002][121212]LastPlay:(2,1,2,4)"));
    //System.out.println(readString("[13][302][1003][31002][112003][3022002][121212]LastPlay:(2,1,3,3)"));
    //System.out.println(readString("[13][302][1003][31002][112003][3022202][121212]LastPlay:(2,1,4,2)"));
    //System.out.println(readString("[13][302][1003][31002][112203][3022202][121212]LastPlay:(2,2,3,2)"));
    //System.out.println(readString("[13][302][1003][31202][112203][3022202][121212]LastPlay:(2,3,2,2)"));
    //System.out.println(readString("[13][302][1023][31202][112203][3022202][121212]LastPlay:(2,4,2,1)"));
    //System.out.println(readString("[13][302][1123][31202][112203][3022202][121212]LastPlay:(1,4,1,2)"));
    //System.out.println(readString("[13][322][1123][31202][112203][3022202][121212]LastPlay:(2,5,1,1)"));
    
    System.out.println(readString("[13][302][1003][30002][1212]LastPlay:null"));
    //System.out.println(readString("[13][332][1003][30002][1212]LastPlay:(3,3,1,1)"));
    //System.out.println(readString("[13][332][1103][30002][1212]LastPlay:(1,2,1,2)"));
    //System.out.println(readString("[13][332][1133][30002][1212]LastPlay:(3,2,2,1)"));
    //System.out.println(readString("[13][332][1133][30102][1212]LastPlay:(1,1,2,2)"));
    //System.out.println(readString("[13][332][1133][32102][1212]LastPlay:(2,1,1,3)"));
    
    
  }
  
  //reads the board
  public static String readString(String board){
    
    
    
    String delims = "\\[|\\]";
    String[] tokens = board.split(delims);
    
    
    
    int j = 0;
    for( int i=0;  i<tokens.length;  i++ )
    {
      if (tokens[i].equals("")==false)
        tokens[j++] = tokens[i];
    }
    String [] newArray = new String[j];
    System.arraycopy( tokens, 0, newArray, 0, j );
    
    //System.out.println(Arrays.toString(newArray));  
    
    // System.out.println(newArray.length-1);  
    
    int size =newArray.length-1;
    
    int matrix [][] = new int [size][size];
    
    
    
    for (int i=0;  i<size; i++){
      for (int z =0 ; z<newArray[i].length(); z++){
        matrix[i][z]= Integer.parseInt(Character.toString(newArray[i].charAt(z)));
        
      }
      
    }
    
    //System.out.println(Arrays.deepToString(matrix));
    for (int i=0;  i<size; i++){
      for (int z =0 ; z<size -newArray[i].length(); z++){
        
        matrix[i][z + newArray[i].length()]= 4;
        
      }
      
    }
    
    //System.out.println();
    //System.out.println(Arrays.deepToString(matrix));
    
    
    
    
    if (newArray[newArray.length -1].equals("LastPlay:null")){
      for (int i =0; i< playerMove.length; i++){
        playerMove[i]=-1;
        
      }
      //  System.out.println(Arrays.toString(playerMove));
      
    }
    else {
      
      delims = "\\(|\\)";
      String[] tokens2 = newArray[newArray.length -1].split(delims);
      
      char [] tokens3 = tokens2[tokens2.length -1 ].toCharArray();
      
      
      
      
      int x = 0;
      for( int i=0;  i<tokens3.length;  i++ )
      {
        if (Character.toString(tokens3[i]).equals(",")==false)
          tokens3[x++] = tokens3[i];
      }
      char [] newArray2 = new char[x];
      System.arraycopy( tokens3, 0, newArray2, 0, x );
      
      
      for (int i =0; i<playerMove.length; i++){
        playerMove[i]=Integer.parseInt(Character.toString((newArray2[i])));
        
      }
      
      
      
      //System.out.println(Arrays.toString(playerMove));
      //System.out.println(playerMove.length);
      
      
      
    }
    
    String bestMove = move(matrix, playerMove);
    //System.out.println(bestMove);
    
    return  move(matrix, playerMove);
    
  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  //returns move
  public static String move(int [][] board, int [] playerMove){
    //if (valid(board)==false){
      
      //System.out.println("You lose!");
      
    //}
    
    //System.out.println(Arrays.toString(playerMove));
    for(int boardz = 0; boardz < board.length; boardz++){
      //System.out.print(boardz);
      //System.out.println(Arrays.toString(board[boardz]));
    }
    
    int playerX = playerMove[1];
    
    int playerY = playerMove[2];
    int playerZ = playerMove[3];
    //System.out.println(playerY);
    //initialize max to a lost
    int max = negativeNumber;
    //and bestMove to 0;
    int [] bestMove =  {0,0,0,0};
    //int bestMove[2] = 0;
    //int bestMove = -1;
    int val = -1000;
    
    
    //board[playerX+1][playerY] = 1;
    int [][] avail = avail(board, playerMove);
    //System.out.println(Arrays.deepToString(avail));
    //System.out.println(avail[0].length);
    for (int i=0; i<avail[0].length; i++){
      for(int color = 1; color <=3; color++){
        if(avail[0][i] < 99){
          //System.out.println(color + " " + avail[0][i] + " " + avail[1][i]);
          board[avail[0][i]][avail[1][i]] = color;//put a token in it
          if (valid(board)!=false){
            for(int boardz = 0; boardz < board.length; boardz++){
              //System.out.print(boardz);
              //System.out.println(Arrays.toString(board[boardz]));
            }
            int x = board.length-avail[0][i]-1;
            int y = avail[1][i];
            //System.out.println(x + " " + y);
            //System.out.println(Arrays.deepToString(avail));
            int [] nextMove ={color, x, y, board.length - x - y};
            //System.out.println("Next Move1: " + Arrays.toString(nextMove));
            //find the max value of that move
            val = max(val, minMax(board, nextMove, 1, negativeNumber, positiveNumber));
            //set alpha
            if (eval(board, playerMove) == positiveNumber) {
              bestMove[0] = color;
              bestMove[1] = board.length-avail[0][i]-1;
              bestMove[2] = avail[1][i];
              bestMove[3] = board.length - (board.length-avail[0][i]-1) - avail[1][i];
              
              board[avail[0][i]][avail[1][i]] = 0;//remove the coin 
              System.out.println("WIN");
              //return bestMove;
            }
            //remove the coin
            
            //reset max and bestMove according to highest value
            if (val > max) {
              bestMove[0] = color;
              bestMove[1] = board.length-avail[0][i]-1;
              bestMove[2] = avail[1][i];
              bestMove[3] = board.length - (board.length-avail[0][i]-1) - avail[1][i];
              max = val;
              
            }
            
          }
          board[avail[0][i]][avail[1][i]] = 0;//remove the coin 
          
          
          //if alpha and beta over lap the move is not worth pursuing
          
        }
      }
      //return the value found
    }
    //make any move if none are available
    if(bestMove[0] == 0 && bestMove[1] == 0){
      return "You Lose";
      //System.out.println("none");
    }
    //return the column that features the best move
    //return bestMove+1;
    
    String builder="(";
    
    for (int i=0; i<bestMove.length; i++){
      if (i!=3){
        builder=builder+Integer.toString(bestMove[i])+",";
      }
      else{
        builder=builder+Integer.toString(bestMove[i])+")";
        
      }
    }
    String best;
    best=builder;
    
    return best;
    
  }
  
  
  //evaluates board
  public static int eval(int [] [] board, int [] lastMove){
    int eval = 0;
    
    int uncolored = 0;
    int blue = 2;
    int green = 3;
    int red = 1;
    int notPossible =-1;
    
    
    
    //base cases
    
    //left hand side =blue
    for (int i=0; i<board.length-1; i++){
      if (board[i][1] == blue){
        return negativeNumber;
      }
    }
    
    //right hand side =red
    int counter =1;
    for (int i=1; i<board.length-1; i++){
      if (board[i][counter] ==red){
        return negativeNumber;
      }
      counter ++;
    }
    
    //bottom row =green
    for (int j=1; j<board[board.length-2].length; j++){
      if (board[board.length-2][j] ==green){
        return negativeNumber;
      }
    }
    
    //scan whole board to see if player lost
    int rowAdjuster =3;
    for (int i =1; i<board.length-1; i++){
      for (int j=1; j<rowAdjuster-1; j++){
        //if piece selected is red
        
        if (board[i][j]==red){
          //case 1 - top right corner
          if ((board[i-1][j]==blue && board[i][j+1]==green) || (board[i-1][j]==green && board[i][j+1]==blue)  ){
            //System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 2 - bottom right corner
          if ((board[i+1][j+1]==blue && board[i][j+1]==green) || (board[i+1][j+1]==green && board[i][j+1]==blue)  ){
            //System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 3 -bottom two
          if ((board[i+1][j+1]==blue && board[i+1][j]==green) || (board[i+1][j+1]==green && board[i+1][j]==blue)  ){
            // System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 4 -top two
          if ((board[i-1][j-1]==blue && board[i-1][j]==green) || (board[i-1][j-1]==green && board[i-1][j]==blue)  ){
            //System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 5 -bottom left corner
          if ((board[i+1][j]==blue && board[i][j-1]==green) || (board[i+1][j]==green && board[i][j-1]==blue)  ){
            //System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 6 -top left corner
          if ((board[i-1][j-1]==blue && board[i][j-1]==green) || (board[i-1][j-1]==green && board[i][j-1]==blue)  ){
            //   System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          
          
        }
        
        
        //if piece selected is blue
        if (board[i][j]==blue){
          
          //case 1 - top right corner
          if ((board[i-1][j]==red && board[i][j+1]==green) || (board[i-1][j]==green && board[i][j+1]==red)  ){
            // System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 2 - bottom right corner
          if ((board[i+1][j+1]==red && board[i][j+1]==green) || (board[i+1][j+1]==green && board[i][j+1]==red)  ){
            // System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 3 -bottom two
          if ((board[i+1][j+1]==red && board[i+1][j]==green) || (board[i+1][j+1]==green && board[i+1][j]==red)  ){
            // System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 4 -top two
          if ((board[i-1][j-1]==red && board[i-1][j]==green) || (board[i-1][j-1]==green && board[i-1][j]==red)  ){
            //System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 5 -bottom left corner
          if ((board[i+1][j]==red && board[i][j-1]==green) || (board[i+1][j]==green && board[i][j-1]==red)  ){
            //  System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 6 -top left corner
          if ((board[i-1][j-1]==red && board[i][j-1]==green) || (board[i-1][j-1]==green && board[i][j-1]==red)  ){
            //System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          
          
          
        }
        
        //if piece selected is green
        if (board[i][j]==green){
          
          
          
          
          
          //case 1 - top right corner
          if ((board[i-1][j]==red && board[i][j+1]==blue) || (board[i-1][j]==blue && board[i][j+1]==red)  ){
            //  System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 2 - bottom right corner
          if ((board[i+1][j+1]==red && board[i][j+1]==blue) || (board[i+1][j+1]==blue && board[i][j+1]==red)  ){
            ///  System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 3 -bottom two
          if ((board[i+1][j+1]==red && board[i+1][j]==blue) || (board[i+1][j+1]==blue && board[i+1][j]==red)  ){
            //  System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 4 -top two
          if ((board[i-1][j-1]==red && board[i-1][j]==blue) || (board[i-1][j-1]==blue && board[i-1][j]==red)  ){
            //  System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 5 -bottom left corner
          if ((board[i+1][j]==red && board[i][j-1]==blue) || (board[i+1][j]==blue && board[i][j-1]==red)  ){
            //  System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          //case 6 -top left corner
          if ((board[i-1][j-1]==red && board[i][j-1]==blue) || (board[i-1][j-1]==blue && board[i][j-1]==red)  ){
            //  System.out.println(negativeNumber);
            return negativeNumber;
            
            
          }
          
          
          
          
        }
        
      }
      
      rowAdjuster++;
    }
    
    
    
    
    //check if opponent won match
    int free=0;
    int taken=0;
    //System.out.println(Arrays.deepToString(board));
    int triangleLength =3;
    /*
     for(int i =1; i< board.length-1; i++){
     for (int j=1; j<triangleLength-1; j++){
     
     if (board[i][j]==blue || board[i][j]==red || board[i][j]==green) {
     //  System.out.println("Board length is: " + board[i].length);
     ////  System.out.println("Integer i is: "+i);
     //   System.out.println("Integer j is: "+j);
     //  System.out.println("Board value is: "+board[i][j]);
     
     taken++;
     }
     
     
     }
     // System.out.println("Row length is: " + triangleLength);
     triangleLength++;
     
     }
     */
    //check if opponent won match
    //get index of chosen spot
    int tempRow = board.length -lastMove[1]-1;
    int tempCol = lastMove[2];
    
    
    
    
    int filled =0;
    int checker =0;
    if(tempCol!=-1){
      //case 1 -right above
      if(board[tempRow+1][tempCol]==uncolored){
        
        int indexRow=tempRow+1;
        int indexCol =tempCol;
        
        
      }
      else {
        filled++;
      }
      //case 2 -right below
      if(board[tempRow-1][tempCol]==uncolored){
        int indexRow=tempRow-1;
        int indexCol =tempCol;
        
      }
      else {
        filled++;
      }
      //case 3 -to the left
      if(board[tempRow][tempCol-1]==uncolored){
        int indexRow=tempRow;
        int indexCol =tempCol-1;
        
      }
      else {
        filled++;
      }
      //case 4 -to the right
      if(board[tempRow][tempCol+1]==uncolored){
        int indexRow=tempRow;
        int indexCol =tempCol+1;
        
      }
      else {
        filled++;
      }
      //case 5 -left diagnol
      if(board[tempRow-1][tempCol-1]==uncolored){
        int indexRow=tempRow-1;
        int indexCol =tempCol-1;
        
      }
      else {
        filled++;
      }
      //case 6 -right diagnol
      if(board[tempRow+1][tempCol+1]==uncolored){
        int indexRow=tempRow+1;
        int indexCol =tempCol+1;
        
      }
      else {
        filled++;
      }
    }
    
    
    
    eval =filled;
    //System.out.println(eval);
    
    return eval;
  }
  
  
  public static int minMax(int [][]board, int []playerMove, int depth, int alpha, int beta) {
    //System.out.println("alpha: " + alpha + " " + eval(board, playerMove) );
    //System.out.println(Arrays.toString(playerMove));
    //System.out.println("EVALUATION: " + eval(board,playerMove));
    //System.out.println("depth: " + depth);
    //if the playerMove is done, one winner has won, or it has reach the max 
    //depth return the evaluation
    if( depth == MAX_DEPTH || eval(board, playerMove) <= negativeNumber || 
       eval(board, playerMove) >= positiveNumber){ //|| done(playerMove)) {
      //System.out.println(eval(board, playerMove));
      //System.out.println("BASE FUCKING CASE");
      return eval(board, playerMove);
    }       
    
    //if it is the AI's turn
    else if (depth % 2 == 0){
      int [][] avail = avail(board, playerMove);
      int val = negativeNumber;  //set val to indicate loss
      //System.out.println(avail[0].length);
      for (int i=0; i<avail[0].length; i++){
        for(int color = 1; color <=3; color++){
          if(avail[0][i] < 99){
            //System.out.println(avail[0][i] + " " + avail[1][i]);
            board[avail[0][i]][avail[1][i]] = color;//put a token in it
            if (valid(board)!=false){
              for(int boardz = 0; boardz < board.length; boardz++){
                //System.out.print(boardz);
                //System.out.println(Arrays.toString(board[boardz]));
              }
              int x = board.length-avail[0][i]-1;
              int y = avail[1][i];
              //System.out.println(x + " " + y);
              //System.out.println(Arrays.deepToString(avail));
              int [] nextMove ={color, x, y, board.length - x - y};
              //System.out.println("Next Move1: " + Arrays.toString(nextMove));
              //find the max value of that move
              val = max(val, minMax(board, nextMove, depth + 1, alpha, beta));
              //set alpha
              alpha = max(alpha, val);
              if(beta < alpha){
                board[avail[0][i]][avail[1][i]] = 0;
                return alpha;
                //break;
              }
              
            }
            board[avail[0][i]][avail[1][i]] = 0;//remove the coin 
            
            
            //if alpha and beta over lap the move is not worth pursuing
            
          }
        }
        //return the value found
        //System.out.println("alpha: " + alpha);
        return alpha;
      }
      
      
      //do the same, predicting the user's move
    }else{
      int [][] avail = avail(board, playerMove);
      int val = positiveNumber;  //set val to indicate loss
      for (int i=0; i<avail[0].length; i++){
        for(int color = 1; color <=3; color++){
          if(avail[0][i] < 99){
            board[avail[0][i]][avail[1][i]] = color;//put a token in it
            if (valid(board)!=false){
              for(int boardz = 0; boardz < board.length; boardz++){
                //System.out.print(boardz);
                //System.out.println(Arrays.toString(board[boardz]));
              }
              int x = board.length-avail[0][i]-1;
              int y = avail[1][i];
              //System.out.println(x + " " + y);
              //System.out.println(Arrays.deepToString(avail));
              int [] nextMove ={color, x, y, board.length - x - y};
              //System.out.println("Next Move: " + Arrays.toString(nextMove));
              val = min(val, minMax(board, nextMove, depth + 1, alpha, beta));
              beta = min(beta, val);
              if(beta < alpha){
                board[avail[0][i]][avail[1][i]] = 0;
                return beta;
                //break;
              } 
              
            }
            board[avail[0][i]][avail[1][i]] = 0;//remove the coin 
            //set alpha
            
            
            //if alpha and beta over lap the move is not worth pursuing
            
          }
        }
        //return the value found
        //System.out.println("beta: " + beta);
        return beta;
      }
      
    }
    
    
    return -1;
  }
  
  
  
  //determine the max
  public static int max(int alpha, int val){
    if(val>alpha)
      return val;
    else 
      return alpha;
  }
  
  
  //determine the min
  public static int min(int beta, int val){
    if(val<beta)
      return val;
    else 
      return beta;
  }
  
  public static int [][] avail(int [] [] board, int [] playerMove){
    //System.out.println("INPUT STRING: " + Arrays.toString(playerMove));
    for(int boardz = 0; boardz < board.length; boardz++){
      //System.out.print(boardz);
      //System.out.println(Arrays.toString(board[boardz]));
    }
    if(playerMove[0] != -1 && playerMove[1] != -1 && playerMove[2] != -1 && playerMove[3] != -1){
      int playerX = board.length-playerMove[1]-1;
      int playerY = playerMove[2];
      
      int [][] avail = new int[2][6];
      //Right Above
      
      if(board[playerX+1][playerY] == 0){
        avail[0][0] = playerX+1;
        avail[1][0] = playerY;
      }else{
        avail[0][0] = 100;
        avail[1][0] = 100;
      }//Right Below
      if(board[playerX-1][playerY] == 0){
        avail[0][1] = playerX-1;
        avail[1][1] = playerY;     
      }else{
        avail[0][1] = 100;
        avail[1][1] = 100;
      }//Left
      if(board[playerX][playerY-1] == 0){
        avail[0][2] = playerX;
        avail[1][2] = playerY-1;
      }else{
        avail[0][2] = 100;
        avail[1][2] = 100;
      }//Right
      if(board[playerX][playerY+1] == 0){
        avail[0][3] = playerX;
        avail[1][3] = playerY+1;
      }else{
        avail[0][3] = 100;
        avail[1][3] = 100;
      }//left diag
      if(board[playerX-1][playerY-1] == 0){
        avail[0][4] = playerX-1;
        avail[1][4] = playerY-1;
      }else{
        avail[0][4] = 100;
        avail[1][4] = 100;
      }//right diag
      if(board[playerX+1][playerY+1] == 0){
        avail[0][5] = playerX+1;
        avail[1][5] = playerY+1;
      }else{
        avail[0][5] = 100;
        avail[1][5] = 100;
      }
      
      if(avail[0][0] == 100 && avail[0][1] == 100 && avail[0][2] == 100 && avail[0][3] == 100 && avail[0][4] == 100 && avail[0][5] == 100){
        for (int i=0; i<board.length; i++){
          for (int j=0; j<board.length; j++){
            if (board[i][j]==0){
              //System.out.println("NEW");
              avail[0][0]=i;
              avail[1][0]=j;
              
            }
            
            
          }
          
        }
      }
      return avail;
    }else{
      int [][] avail = new int[2][6];
      
      avail[0][0] = 100;
      avail[1][0] = 100;
      avail[0][1] = 100;
      avail[1][1] = 100;
      avail[0][2] = 100;
      avail[1][2] = 100;
      avail[0][3] = 100;
      avail[1][3] = 100;
      avail[0][4] = 100;
      avail[1][4] = 100;
      avail[0][5] = 100;
      avail[1][5] = 100;
      for (int i=0; i<board.length; i++){
          for (int j=0; j<board.length; j++){
            if (board[i][j]==0){
              //System.out.println("NEW");
              avail[0][0]=i;
              avail[1][0]=j;
              
            }
            
            
          }
          
        }
      
      return avail;
    }
    //System.out.println(Arrays.deepToString(avail));
    
  }
  
  public static boolean valid(int [] [] board){
    int [] dummy = {-1,-1,-1,-1};
    
    float answer =eval(board, dummy);
    if (answer==negativeNumber){
      
      return false;
    }
    else {
      
      return true; 
    }
    
  }
  
  
  
}